// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
	// Distributes the load signal to RAM, Screen, or Keyboard components
    // based on the two highest bits of the address (address[13..14]).
    // a=loadRAM1: Load signal for the first 8K of RAM (address range 0x0000 - 0x1FFF)
    // b=loadRAM2: Load signal for the second 8K of RAM (address range 0x2000 - 0x3FFF)
    // c=loadSCRN: Load signal for the Screen memory map (address range 0x4000 - 0x5FFF)
    // d=loadKBD: Load signal for the Keyboard memory map (address 0x6000)
	DMux4Way (in=load, sel=address[13..14], a=loadRAM1, b=loadRAM2, c=loadSCRN, d=loadKBD);
	
	// Combines load signals for the two 8K RAM segments into a single load signal for RAM16K
	Or (a=loadRAM1, b=loadRAM2, out=loadRAM);
	
	// Main RAM component (16K words, address range 0x0000 - 0x3FFF)
    // in: data input, load: write enable, address: 14-bit address (lower 14 bits of the input address)
    // out: data output from RAM
    RAM16K (in=in, load=loadRAM, address=address[0..13], out=RAMout);
	
	// Memory-mapped Screen component (8K words, address range 0x4000 - 0x5FFF)
    // in: data input, load: write enable, address: 13-bit address (lower 13 bits of the input address)
    // out: data output from Screen memory
    Screen (in=in, load=loadSCRN, address=address[0..12], out=SCRNout);
	
	// Memory-mapped Keyboard component (address 0x6000)
    // out: data output from Keyboard memory
    Keyboard (out=KBDout);
	
	// Multiplexer to select the output data from RAM, Screen, or Keyboard
    // a: output from RAM, b: output from RAM (redundant here, but part of the design)
    // c: output from Screen, d: output from Keyboard
    // sel: selects which output to use based on address[13..14]
    Mux4Way16 (a=RAMout, b=RAMout, c=SCRNout, d=KBDout, sel=address[13..14], out=out);
}